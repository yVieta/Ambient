[package]
name = "Rendering"
description = "Rendering-related state, including global rendering parameters and per-entity state."
content = { type = "Asset", schema = true }
version = "0.3.2-nightly-2024-01-09"
ambient_version = "0.3.2-nightly-2024-01-09"

[components.cast_shadows]
type = "Empty"
name = "Cast shadows"
description = "If attached, this entity will cast shadows."
attributes = ["Debuggable", "Networked", "Store"]

[components.color]
type = "Vec4"
name = "Color"
description = "This entity will be tinted with the specified color if the color is not black."
attributes = ["Debuggable", "Networked", "Store"]

[components.double_sided]
type = "Bool"
name = "Double-sided"
description = "If attached, this controls whether or not the entity will be rendered with double-sided rendering. If not attached, the decision will fall back to the material."
attributes = ["Debuggable", "Networked", "Store"]

[components.fog_color]
type = "Vec3"
name = "Fog color"
description = "The color of the fog for this `sun`."
attributes = ["Debuggable", "Networked", "Store"]

[components.fog_density]
type = "F32"
name = "Fog density"
description = "The density of the fog for this `sun`."
attributes = ["Debuggable", "Networked", "Store"]

[components.fog_height_falloff]
type = "F32"
name = "Fog height fall-off"
description = "The height at which the fog will fall off (i.e. stop being visible) for this `sun`."
attributes = ["Debuggable", "Networked", "Store"]

[components.joint_matrices]
type = { type = "Vec", element_type = "Mat4" }
name = "Joint Matrices"
description = """
Contains the matrices for each joint of this skinned mesh.
This should be used in combination with `joints`."""
attributes = ["Debuggable", "Networked", "Store"]

[components.joints]
type = { type = "Vec", element_type = "EntityId" }
name = "Joints"
description = "Contains the joints that comprise this skinned mesh."
attributes = ["Debuggable", "Networked", "Store"]

[components.light_ambient]
type = "Vec3"
name = "Light ambient"
description = "The ambient light color of the `sun`."
attributes = ["Debuggable", "Networked", "Store"]

[components.light_diffuse]
type = "Vec3"
name = "Light diffuse"
description = "The diffuse light color of the `sun`."
attributes = ["Debuggable", "Networked", "Store"]

[components.outline]
type = "Vec4"
name = "Outline"
description = "If attached, this entity will be rendered with an outline with the color specified."
attributes = ["Debuggable", "Networked", "Store"]

[components.outline_recursive]
type = "Vec4"
name = "Outline (recursive)"
description = """
If attached, this entity and all of its children will be rendered with an outline with the color specified.
You do not need to attach `outline` if you have attached `outline_recursive`."""
attributes = ["Debuggable", "Networked", "Store"]

[components.overlay]
type = "Empty"
name = "Overlay"
description = "If attached, this entity will be rendered with an overlay."
attributes = ["Debuggable", "Networked", "Store"]

[components.pbr_material_from_url]
type = "String"
name = "PBR material from URL"
description = "Load a PBR material from the URL and attach it to this entity."
attributes = ["Debuggable", "Networked", "Store"]

[components.sky]
type = "Empty"
name = "Sky"
description = "Add a realistic skybox to the scene."
attributes = ["Debuggable", "Networked", "Store"]

[components.sun]
type = "F32"
name = "Sun"
description = """
Marks this entity as a sun (i.e. its rotation will be used to control the global light direction).
The entity with the highest `sun` value takes precedence."""
attributes = ["Debuggable", "Networked", "Store"]

[components.transparency_group]
type = "I32"
name = "Transparency group"
description = "Controls when this transparent object will be rendered. Transparent objects are sorted by `(transparency_group, z-depth)`."
attributes = ["Debuggable", "Networked", "Store"]

[components.water]
type = "Empty"
name = "Water"
description = "Add a realistic water plane to this entity."
attributes = ["Debuggable", "Networked", "Store"]

[components.decal_from_url]
type = "String"
name = "Decal material from URL"
description = "Load a Decal material from the URL and attach it to this entity."
attributes = ["Debuggable", "Networked", "Store"]

[components.scissors]
type = "Uvec4"
name = "Scissors"
description = "Apply a scissors test to this entity (anything outside the rect will be hidden)."
attributes = ["Debuggable", "Networked", "Store"]

[components.scissors_recursive]
type = "Uvec4"
name = "Scissors (recursive)"
description = """
If attached, this entity and all of its children will be rendered with an scissor with the rect specified.
You do not need to attach `scissors` if you have attached `scissors_recursive`."""
attributes = ["Debuggable", "Networked", "Store"]

[components.local_bounding_aabb_min]
type = "Vec3"
name = "Local bounding AABB min"
description = "The minimum point of the local AABB of this entity."
attributes = ["Debuggable"]

[components.local_bounding_aabb_max]
type = "Vec3"
name = "Local bounding AABB max"
description = "The maximum point of the local AABB of this entity."
attributes = ["Debuggable"]

[components.world_bounding_aabb_min]
type = "Vec3"
name = "World bounding AABB min"
description = "The minimum point of the world AABB of this entity."
attributes = ["Debuggable"]

[components.world_bounding_aabb_max]
type = "Vec3"
name = "World bounding AABB max"
description = "The maximum point of the world AABB of this entity."
attributes = ["Debuggable"]

[components.world_bounding_sphere_center]
type = "Vec3"
name = "World bounding sphere center"
description = "The center of the world bounding sphere of this entity."
attributes = ["Debuggable"]

[components.world_bounding_sphere_radius]
type = "F32"
name = "World bounding sphere radius"
description = "The radius of the world bounding sphere of this entity."
attributes = ["Debuggable"]
